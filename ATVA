import numpy as np
from BTVA import BTVA
from risk_measure import CollusionChangeRisk, probStrategicVoting
from happiness_measure import NDCG
from voting_schemes import plurality_voting
import random
from itertools import permutations


class ATVA:
    def __init__(self, happiness_measure=NDCG, risk_measure=CollusionChangeRisk):
        """
        Create an Advanced Tactical Voter Analysis (ATVA) object.

        :param happiness_measure: Function to measure happiness of voters.
        :param risk_measure: Function to assess risk of collusion.
        """
        self.happiness_measure = happiness_measure
        self.risk_measure = risk_measure

    def analyze(self, voter_preference: np.ndarray, voting_scheme=plurality_voting):
        """
        Analyze voting preferences considering collusion between two random voters.

        :param voter_preference: A (m,n) shaped array where m is candidates and n is voters.
        :param voting_scheme: The voting system to be used.
        :return: A tuple with the outcome, individual happiness, overall happiness, collusion options, and risk.
        """
        m, n = voter_preference.shape
        btva = BTVA(self.happiness_measure, self.risk_measure)
        
        outcome, individual_happiness, overall_happiness, strategic_options, _ = btva.analyze(voter_preference, voting_scheme)
        
        # Randomly select two voters for potential collusion
        voter_indices = random.sample(range(n), 2)
        collusion_options = []
        
        for i in voter_indices:
            options = set()
            all_options = set(permutations(voter_preference[:, i]))
            all_options.discard(tuple(voter_preference[:, i]))  # Remove original preference
            
            for option in all_options:
                mod_pref = voter_preference.copy()
                mod_pref[:, i] = option
                mod_outcome = voting_scheme(mod_pref)
                mod_outcome = {k: v for k, v in sorted(mod_outcome.items(), key=lambda item: item[1], reverse=True)}
                
                mod_happiness = self.happiness_measure(option, list(mod_outcome.keys()))
                if mod_happiness > individual_happiness[i]:
                    options.add((option, mod_happiness))
            
            collusion_options.append(options)
        
        # Assess collusion risk
        collusion_risk = self.risk_measure(voter_preference, voting_scheme, individual_happiness, collusion_options)
        
        return outcome, individual_happiness, overall_happiness, collusion_options, collusion_risk
